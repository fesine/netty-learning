为什么要使用线程池
线程是不是越多越好？
1、线程在java中是一个对象，更是操作系统的资源，线程创建、销毁需要时间。
如果创建时间+销毁时间>执行任务时间，就很不划算。
2、java对象占用堆内存，操作系统线程占用系统内存，
根据jvm规范，一个线程默认的最大栈大小1M，这个栈空间大小需要从系统内存中分配。
线程越多，会消耗很多的内存。
3、操作系统需要频繁切换线程上下文（大家都想被运行），影响性能。
线程池的推出就是为了控制线程数量。

线程池原理-概念
1、线程池管理器：用于创建并管理线程池，包括创建线程池，销毁线程池，添加任务；
2、工作线程：线程池中的线程，在没有任务时处于等待状态,可以循环的执行任务；
3、任务接口：每个任务都必须实现的接口，以供工作线程调度任务的执行，
它规定了任务的入口，任务执行完成后的收尾工作，任务的执行状态等。
4、任务队列：用于存放没有处理的任务。提供一种缓冲机制。

线程池API-接口定义和实现类
类型         名称                        描述
接口       Executor                    最顶级的接口，定义执行任务的方法execute
接口       ExecutorService             继承Executor接口，扩展了Callable、Future、关闭方法
接口       ScheduledExecutorService    继承ExecutorService接口，增加了定时任务相关方法
实现类     ThreadPoolExecutor          实现Executor接口（基础、标准的线程池实现）
实现类     ScheduledThreadPoolExecutor 继承ThreadPoolExecutor，实现ScheduledExecutorService中相关的定时任务方法
可以认为ScheduledThreadPoolExecutor是功能最丰富的类

线程池原理-任务execute过程
1、是否达到核心线程数量？没有，创建一个工作线程执行任务；
2、工作队列是否已满？没有，则将新提交的任务添加到队列中；
3、是否达到最大线程数量？没有，创建一个工作线程执行任务；
4、最后，执行拒绝策略来处理这个任务。

线程数量
如何确定合适数量的线程？
1、计算型任务：CPU数量的1-2倍
2、IO型任务：相对计算型任务要多一些，要根据具体的IO阻塞时长进行考量决定
tomcat一般默认最大线程数是200
也可以考虑在一个最小数和最大数间自动增减线程，可以使用cached类型线程池
也可以监控cpu使用率，80%为主要衡量指标，小于80%，说明够用，大于80%，说明不够用。