锁的概念
1、自旋锁
为了不放弃cpu执行事件，循环的使用cas技术对数据不断尝试更新，直到成功
2、悲观锁
假定会发生并发冲突，同步所有对数据的操作，从读数据就开始上锁
3、乐观锁
假定没有冲突，在修改数据时如果发现数据和之前获取的不一致，则读取最新的数据，修改后重试修改

4、独享锁（写）
给资源加上写锁，线程可以修改资源，其他线程不能再加锁；（单写）
5、共享锁（读）
给资源加上读锁之后只能读不能改，其他线程也只能加读锁，不能加写锁；（多读）

6、可重入锁，不可重入锁
线程拿到一把锁之后，可以自由进入同一把锁同步的其他代码

7、公平锁、非公平锁
争抢锁的顺序，如果是按照先来后到，则为公平

几个重要的锁实现方式：
synchronized、ReentrantLock、ReentrantReadWriteLock

同步关键字
synchronized
属于最基本的线程通信机制，基于对象监视器实现的。
java中的每个对象都与一个监视器关联，一个线程可以锁定或解锁。
一次只有一个线程可以锁定监视器。
试图锁定该监视器的任何其他线程都会被阻塞，直到它们可以获得该监视器上的锁定为止。
特性：可重入、独享、悲观锁
锁的范围：类锁、对象锁、锁消除（如果在线程栈内使用不涉及到线程安全问题，则可以消除锁）、锁粗化（多个锁可以合并成一个锁）

提示：同步关键字，不仅是实现同步，根据jmm规定还能保证可见性（读取最新主内存数据，结束后写入主内存）

轻量级锁的内容：锁定状态，当前锁的线程地址
偏向锁的内容：标记是否偏向 JVM是否开启了偏向
cas成功添加轻量级锁。
偏向锁，本质上是没有锁，如果没有发生过多线程争抢资源的情况，jvm默认为就是单线程，无需做同步。一旦发生多线程争抢，就升级为轻量级锁

重量级锁
修改mark word如果失败，会cas自旋一定次数，该次数可通过参数配置：
超过次数，仍未抢到锁，则锁升级到重量级锁，进入阻塞。

Lock接口
ReadWriteLock
维护一对关联锁，一个只用于读操作，一个用于写入；读锁可以由多个线程同时持有，写锁是排他的。
适合读线程比写线程多的情场景，改进互斥锁的性能，示例场景：缓存组件、集合的并发性能改造。
锁降级：指的是写锁降级成读锁。把持住当前拥有的写锁的同时，再获取到读锁，随后释放写锁的过程。
写锁是线程独占，读锁是共享，所以写>读是升级。（读-->写是不可能的）

Condition
用于替代wait/notify
Object中的wait(),notify(),notifyAll()方法是和synchronized配合使用的，可以唤醒一个或全部(单个等待集)
Condition是配合Lock使用的，提供等待多个集合，更精确的控制（底层是park/unpark机制）
使用场景：jdk中的队列实现
多线程读写队列，写入数据时，唤醒读取等待的线程继续执行；读取数据后，通知写入队列的线程执行

